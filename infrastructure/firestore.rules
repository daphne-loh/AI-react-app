rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasValidUserData() {
      return request.resource.data.keys().hasAll(['uid', 'email', 'createdAt']) &&
             request.resource.data.uid is string &&
             request.resource.data.email is string &&
             request.resource.data.createdAt is timestamp;
    }
    
    function hasGDPRConsent() {
      return request.resource.data.gdprConsent.given == true &&
             request.resource.data.gdprConsent.timestamp is timestamp &&
             request.resource.data.gdprConsent.version is string;
    }
    
    // Users can read and write their own user document with validation
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && 
                      isOwner(userId) && 
                      hasValidUserData() &&
                      hasGDPRConsent();
      allow update: if isAuthenticated() && 
                      isOwner(userId) &&
                      // Prevent modification of critical fields
                      !('uid' in request.resource.data.diff(resource.data).affectedKeys()) &&
                      !('createdAt' in request.resource.data.diff(resource.data).affectedKeys());
      allow delete: if isAuthenticated() && isOwner(userId);
      
      // Users can read and write their own collections with validation
      match /collections/{collectionId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated() && 
                        isOwner(userId) &&
                        request.resource.data.keys().hasAll(['foodItemId', 'collectedAt']) &&
                        request.resource.data.foodItemId is string &&
                        request.resource.data.collectedAt is timestamp;
      }
      
      // User preferences subcollection
      match /preferences/{prefId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
      
      // User statistics subcollection
      match /stats/{statId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }
    
    // Food items are publicly readable for all authenticated users
    match /food-items/{itemId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admin can modify via server
    }
    
    // Content packs are publicly readable for all authenticated users  
    match /content-packs/{packId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admin can modify via server
    }
    
    // System collections and configuration (read-only)
    match /system/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server can modify
    }
    
    // Audit logs - write-only for authenticated users, no read access
    match /analytics/audit-logs/{logId} {
      allow create: if isAuthenticated() &&
                     request.resource.data.keys().hasAll(['userId', 'action', 'timestamp']) &&
                     request.resource.data.userId == request.auth.uid &&
                     request.resource.data.timestamp is timestamp;
      allow read, update, delete: if false; // Only server can access
    }
    
    // General analytics data - no client access
    match /analytics/{document=**} {
      allow read, write: if false; // Only server can access
    }
    
    // GDPR compliance data export requests
    match /gdpr/data-exports/{requestId} {
      allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
      allow update, delete: if false; // Only server can process
    }
    
    // GDPR data deletion requests  
    match /gdpr/deletion-requests/{requestId} {
      allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
      allow update, delete: if false; // Only server can process
    }
    
    // Privacy policy and terms versions (read-only)
    match /legal/{document=**} {
      allow read: if true; // Public read access
      allow write: if false; // Only admin can modify
    }
  }
}